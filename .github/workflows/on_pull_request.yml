name: Spring petclinic app pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: write


jobs:

  pr-build:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    environment: pr-build
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      GCP_ARTIF_REGISTRY_URL: ${{ secrets.GCP_ARTIF_REGISTRY_URL }}
      
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Bump Semantic Version
        id: version_py
        run: |
          pip install semver
          SEM_VERSION=$(python3 versioning/versioning.py minor)
          echo "SEM_VERSION=${SEM_VERSION}" >> $GITHUB_OUTPUT
        
      - name: Prepare pom.xml
        run: |
          export ART_REGISTRY_URL="${{ env.GCP_ARTIF_REGISTRY_URL }}"
          export SEM_VERSION="${{ steps.version_py.outputs.SEM_VERSION }}"
          envsubst < pom_template.xml > pom.xml
      
      - name: Validate with Maven
        run: mvn -B validate
      
      - name: Compile with Maven
        run: mvn -B compile

      - name: Test with Maven
        run: mvn -B test
      
      - name: Clean, test, compile with Maven
        run: mvn -B clean install

      - name: Authenticate to GCP
        uses: 'google-github-actions/auth@v3'
        with:
          credentials_json: ${{ env.GCP_SA_KEY }}

      - name: Configure Maven for GCP Artifact Registry
        run: |
          mkdir -p $HOME/.m2
          cat <<EOF > $HOME/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifact-registry</id>
                <username>_json_key</username>
                <password>${{ env.GCP_SA_KEY }}</password>
              </server>
            </servers>
          <settings>
          EOF

      
      - name: Deploy to the Artifact Registry
        run: mvn deploy
      

      
  
  push-main-build:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    outputs:
      docker_image_fullname: ${{ steps.image_name.outputs.docker_image_fullname }}
    environment: push-main-build
    env: 
      DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: COnfig git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Check github
        run: echo ${{ github }}

        
      - name: Bump Semantic Version
        id: vers_py
        run: |
          pip install semver
          SEM_VERSION=$(python3 versioning/versioning.py minor)
          echo "SEM_VERSION=${SEM_VERSION}" >> $GITHUB_OUTPUT
          echo "var SEM_VERSION=${SEM_VERSION}"

      - name: Prepare pom.xml
        run: |
          export ART_REGISTRY_URL="${{ env.GCP_ARTIF_REGISTRY_URL }}"
          export SEM_VERSION="${{ steps.vers_py.outputs.SEM_VERSION }}"
          envsubst < pom_template.xml > pom.xml

      - name: Clean, test, compile with Maven
        run: mvn -B clean install -Dcheckstyle.skip

      - name: Docker image processing and pushing
        id: image_name
        run: |
          echo ${{ secrets.CP_GHA_TOKEN }} | docker login -u ${{ secrets.CP_GHA_USERNAME }} --password-stdin
          docker buildx build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.vers_py.outputs.SEM_VERSION }} --push .
          echo "docker_image_fullname='${{ env.DOCKER_IMAGE_NAME }}:${{ steps.vers_py.outputs.SEM_VERSION }}'" >> $GITHUB_OUTPUT
  

  manual_deploy:
    runs-on: ubuntu-latest
    needs: push-main-build
    environment: manual_deploy
    env: 
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
    steps:

      - name: Check out the repository
        uses: actions/checkout@v3
    
      - name: Authenticate to GCP
        uses: 'google-github-actions/auth@v3'
        with:
          credentials_json: ${{ env.GCP_SA_KEY }}

      - name: Save SSH keys to the local path
        run: |
          mkdir -p ~/.ssh ~/.gcp/keys/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/terraform_gce_key
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/terraform_gce_key.pub
          echo "${{ env.GCP_SA_KEY }}" > ~/.gcp/keys/service-account.json

          chmod 600 ~/.ssh/terraform_gce_key
          chmod 600 ~/.ssh/terraform_gce_key.pub
          chmod 600 ~/.gcp/keys/service-account.json
   
      - name: Get IP address of two VMs and run docker container
        env:
          image_name: ${{ needs.push-main-build.outputs.docker_image_fullname }}
          CP_DATABASE_USERNAME: ${{ secrets.CP_DATABASE_USERNAME }}
          CP_DATABASE_PASSWORD: ${{ secrets.CP_DATABASE_PASSWORD }}
        run: |
          ext_ips=($(gcloud compute instances list | grep cp-instance-.*-bm | awk '{ print $5 }'))

          echo "================== SHow external IPs: =================="
          echo "${ext_ips[@]}"

          for ip_val in "${ext_ips[@]}"; do
            echo "================== Login to ${ip_val} =================="
            ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/terraform_gce_key \
              ${{ secrets.CP_GCP_VM_USERNAME }}@${ip_val} << 'EOF'
            
            docker stop $(docker ps -q) || true
            docker pull ${{ env.image_name }}

            gcloud auth activate-service-account --key-file=~/.gcp/keys/service-account.json
            db_pub_ip=$( gcloud sql instances describe cp-cloud-sql-bm \
              --format="get(ipAddresses[0].ipAddress)" )
            docker run -d -p 8080:8080 --name petclinic \
              --env SPRING_DATASOURCE_URL=jdbc:postgresql://${db_pub_ip}:5432/petclinic \
              --env SPRING_DATASOURCE_USERNAME=${{ env.CP_DATABASE_USERNAME }} \
              --env SPRING_DATASOURCE_PASSWORD=${{ env.CP_DATABASE_PASSWORD }} \
              ${{ env.image_name }}
          EOF
          done

      - name: Print external address of the app
        run: |
          echo "Access the app via the link:"
          app_link=$( gcloud compute forwarding-rules list | grep cp-xlb-forwarding-rule-bm | awk '{print $2}' )
          echo "http://${app_link}:8080"